% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DaparToolshed_aggregate.R
\name{DaparToolshed-aggregate}
\alias{DaparToolshed-aggregate}
\alias{aggregateFeatures4Prostar,QFeatures-method}
\alias{aggregateFeatures4Prostar,SummarizedExperiment-method}
\alias{aggQmetadata}
\alias{aggregateMethods}
\title{Aggregate an assay's quantitative features}
\usage{
\S4method{aggregateFeatures4Prostar}{QFeatures}(
  object,
  i,
  fcol,
  name = "newAssay",
  fun = MsCoreUtils::robustSummary,
  ...
)

\S4method{aggregateFeatures4Prostar}{SummarizedExperiment}(
  object,
  fcol,
  fun = MsCoreUtils::robustSummary,
  conds,
  ...
)

aggQmetadata(qMeta, X, level, conds)

aggregateMethods()
}
\arguments{
\item{object}{An instance of class \link{QFeatures} or \link{SummarizedExperiment}.}

\item{i}{The index or name of the assay which features will be
aggregated the create the new assay.}

\item{fcol}{A \code{character(1)} naming a rowdata variable (of assay
\code{i} in case of a \code{QFeatures}) defining how to aggregate the
features of the assay. This variable is either a \code{character}
or a (possibly sparse) matrix. See below for details.}

\item{name}{A \code{character(1)} naming the new assay. Default is
\code{newAssay}. Note that the function will fail if there's
already an assay with \code{name}.}

\item{fun}{A function used for quantitative feature
aggregation. See Details for examples.}

\item{...}{Additional parameters passed the \code{fun} and \code{fun.qmeta}.}

\item{conds}{A \code{character()} vector which is the names of conditions
for each sample in the dataset.}

\item{qMeta}{An object of class 'SummarizedExperiment'}

\item{X}{xxxx}

\item{level}{A \code{character(1)} which is the type of dataset}
}
\value{
A \code{QFeatures} object with an additional assay or a
\code{SummarizedExperiment} object (or subclass thereof).

NA

xxxxx
}
\description{
This function aggregates the quantitative features of an assay,
applying a summarization function (\code{fun}) to sets of features.
The \code{fcol} variable name points to a rowData column that defines
how to group the features during aggregate. This variable can
either be a vector (we then refer to an \emph{aggregation by vector})
or an adjacency matrix (\emph{aggregation by matrix}).

The quantitative metadata are aggregated with a function (\code{fun.qmeta}).

The list of agregation methods can be obtained with the function
aggregateMethods()]. This function compiles both methods from the
packages \code{DaparToolshed} and \code{QFeatures}.

xxx
}
\details{
xxxxxxx
}
\section{Iterative aggregation function}{


xxxxxx
xxxxx
}

\section{Quantitative metadata aggregation}{


xxxxxx
xxxx

The function to aggregate the quantitative metadata is
\itemize{
\item \code{aggQmetadat()} xxxxx
}
}

\examples{

## ---------------------------------------
## An example QFeatures with PSM-level data
## ---------------------------------------
data(ft, package='DaparToolshed')
ft

## Aggregate peptides into proteins
## using the adjacency matrix
feat1 <- aggregateFeatures4Prostar(object = ft,
i = 1,
name = 'aggregated',
fcol = 'adjacencyMatrix',
fun = colSumsMat,
fun.qmeta = aggQmeta)
feat1

assay(feat1[[1]])
assay(feat1[[2]])
aggcounts(feat1[[2]])
assay(feat1[[3]])
aggcounts(feat1[[3]])
rowData(ft[[2]])
data(ft, package='DaparToolshed')
qMeta <- qMetadata(ft, 1)
X <- adjacencyMatrix(ft, 1)
level <- typeDataset(ft, 1)
conds <- colData(ft)$Condition
aggQmeta <- aggQmetadata(qMeta, X, level, conds)

}
\seealso{
The \emph{QFeatures} vignette provides an extended example and
the \emph{Aggregation} vignette, for a complete quantitative
proteomics data processing pipeline.
}
